/*Aplique o padrão de projeto Observer para criar um simples editor de texto. Considere a solução apresentada no Hipertexto 6 e utilize o código visto para implementar novas classes. Os requisitos para avaliar o projeto são: 
- implementar uma subclasse da classe Editor chamada TextEditor;
- aplicar o método insertLine, que recebe os parâmetros lineNumber e text;
- inserir o texto na ordem correspondente a lineNumber e deslocar as linhas posteriores se necessário;
- aplicar o método removeLine, que recebe lineNumber como parâmetro, deleta o texto da linha correspondente e desloca as linhas posteriores se necessário;
- instanciar um TextEditor e disparar o evento “open”;
- receber as linhas de texto, que serão inseridas no objeto textEditor, do usuário até que ele envie o texto “EOF”, que não deve ser inserido no objeto textEditor;
- por fim, o textEditor deve disparar o evento “save” para que o conteúdo seja salvo no arquivo configurado 
- e imprimir todo o conteúdo do arquivo na tela.
 */
 
const fs = require('fs')
const readlinesync = require('readline-sync')
const arquivo = './observer.txt'

class Editor {
    texto!
    observerList: ObserverTextEditor[] = []
    setTexto(texto) {
        this.notifyObserverTextEditor()
        return this.texto = texto
    }
    getState() {
        return this.texto
    }
    insertLine(lineNumber, text) {
        let texto = fs.readFileSync(arquivo, 'utf-8')
        let fileText: Array<string> = texto.split("\r\n")
        for (let i = fileText.length + 1; i >= lineNumber; i--) {
            fileText[i] = fileText[i - 1];
        }
        fileText[lineNumber - 1] = text;
        var textoFinal = fileText.filter(function (i) {
            return i;
        });
        return textoFinal
    }
    removeLine(lineNumber) {
        let texto = fs.readFileSync(arquivo, 'utf-8')
        let fileText: Array<string> = texto.split("\r\n")
        for (let i = lineNumber - 1; i < fileText.length; i++) {
            fileText[i] = fileText[i + 1]
        }
        var linhaRemovida = fileText.filter(function (i) {
            return i;
        });
        return linhaRemovida
    }
    addObserver(observer: ObserverTextEditor) {
        this.observerList.push(observer)
    }
    notifyObserverTextEditor(): void {
        for (let obs of this.observerList) {
            obs.open()
        }
        for (let sav of this.observerList) {
            sav.save()
        }
    }
}
abstract class ObserverTextEditor { 
    protected subject!: Editor
    open(): any {}
    save(): any {}
}
class TextEditor extends ObserverTextEditor {
    constructor(subject: Editor) {
        super()
        this.subject = subject
        this.subject.addObserver(this)
    }
    open(): any {
        if (controler == 1) {
            console.log('Texto inserido...')
            console.table(novoTexto.insertLine(numLinha, escreverTexto))
        } else if (controler == 2) {
            console.log('Linha removida...')
            console.table(novoTexto.removeLine(deletaLinha))
        }
    }
    save(): any {
        if (controler == 1) {
            fs.writeFileSync(arquivo, novoTexto.insertLine(numLinha, escreverTexto).join("\r\n"))
            novoTexto.insertLine(numLinha, escreverTexto).join("\r\n")
            console.log('Salvando texto inserido...')
        } else if (controler == 2) {
            fs.writeFileSync(arquivo, novoTexto.removeLine(deletaLinha).join("\r\n"))
            novoTexto.removeLine(deletaLinha).join("\r\n")
            console.log('Salvando deleção de linha...')
        } else {
            fs.readFileSync(arquivo, 'utf-8')
            console.log('Exibindo o arquivo...')
        }
    }
}
let novoTexto = new Editor()
let txtEditor = new TextEditor(novoTexto)
let contador: boolean = true
while (contador == true) {
    console.log('\n\n##### LISTA DE DESEJOS #####')
    var menuPrincipal = ['1 - MINHA LISTA', '2 - INCLUIR DESEJO', '3 - REMOVER DESEJO']
    var index = readlinesync.keyInSelect(menuPrincipal, 'O que você deseja fazer? \n\n')
    if (index == 0) {
        controler = 3
        let textoAtual = fs.readFileSync(arquivo, 'utf-8')
        console.log(textoAtual);
    } else if (index == 1) {
        let cont: boolean = true
        while (cont == true) {
            var controler = 1
            var escreverTexto = readlinesync.question("Digite o texto a ser inserido em sua lista [EOF - para sair]: ")
            if (escreverTexto == 'EOF') {
                cont = false
                break
            } else {
                var numeroLinha = readlinesync.question("Informe o número da linha para inserir o texto: ")
                novoTexto.notifyObserverTextEditor()
            }
        }
    } else if (index == 2) {
        var controler = 2
        var deletaLinha = readlinesync.question('Informe o número da linha a ser removida: ')
        novoTexto.notifyObserverTextEditor()
    } else {
        process.exit
        contador = false
    }
}
